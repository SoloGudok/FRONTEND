import MenuFooter from "../components/MenuFooter";
import React, { useEffect, useState } from "react";
import "./styles-dashboard.css";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { Swiper, SwiperSlide } from "swiper/react";
import { Autoplay, Pagination, Navigation, FreeMode } from "swiper/modules";
import "swiper/css";
import "swiper/css/free-mode";
import "swiper/css/pagination";
import { Bar, Doughnut } from "react-chartjs-2";
import "chart.js/auto";
import LooksOneIcon from "@mui/icons-material/LooksOne";
import LooksTwoIcon from "@mui/icons-material/LooksTwo";
import Looks3Icon from "@mui/icons-material/Looks3";
import ArrowCircleRightOutlinedIcon from "@mui/icons-material/ArrowCircleRightOutlined";
import ad1 from "./ad1.png";
import ad2 from "./ad2.png";
const categories = [
  { id: 0, name: "Ï†ÑÏ≤¥", emoji: "üîç" },
  { id: 1, name: "Ìó¨Ïä§ÏºÄÏñ¥", emoji: "üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è" },
  { id: 2, name: "Ìôà/ÎùºÏù¥ÌîÑ", emoji: "üè†" },
  { id: 3, name: "Í≤åÏûÑ", emoji: "üéÆ" },
  { id: 4, name: "IT", emoji: "üíª" },
  { id: 5, name: "ÏãùÌíà", emoji: "üçΩÔ∏è" },
  { id: 6, name: "ÏûêÍ∏∞Í∞úÎ∞ú", emoji: "üõ†Ô∏è" },
  { id: 7, name: "Î∑∞Ìã∞", emoji: "üíÑ" },
  { id: 8, name: "ÏòÅÏÉÅ", emoji: "üé•" },
  { id: 9, name: "ÏùåÏïÖ", emoji: "üéµ" },
  { id: 10, name: "ÎèÑÏÑú", emoji: "üìö" },
];

function Dashboard() {
  const [loading, setLoading] = useState(false);
  const [chart1Labels, setChart1Labels] = useState([]);
  const [chart1Datas, setChart1Datas] = useState([]);
  const [chart2Labels, setChart2Labels] = useState([]);
  const [chart2Datas, setChart2Datas] = useState([]);
  const [subscribingImg, setSubScribingImg] = useState([]);
  const [recommendSubscribingImg, setRecommendSubscribingImg] = useState([]);
  const [cards, setCards] = useState([]);
  const [advertisement_images, setadvertisement_images] = useState([]);
  const [totalExpense, setTotalExpense] = useState(0);
  const [totalSubscriptionExpense, setTotalSubscriptionExpense] = useState(0);
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);
  const navigate = useNavigate();

  // ÏÉÅÌÉú ÏÑ†Ïñ∏ Î∂ÄÎ∂ÑÏóê Ï∂îÍ∞Ä
  const [autoplayEnabled, setAutoplayEnabled] = useState(true);
  const swiperRef = React.useRef(null);

  // Ïª¥Ìè¨ÎÑåÌä∏Ïóê Îã§Ïùå Ìï®Ïàò Ï∂îÍ∞Ä
  const handleStopAutoplay = () => {
    if (swiperRef.current && swiperRef.current.swiper) {
      swiperRef.current.swiper.autoplay.stop();
      setAutoplayEnabled(false);
    }
  };

  const handleStartAutoplay = () => {
    if (swiperRef.current && swiperRef.current.swiper) {
      swiperRef.current.swiper.autoplay.start();
      setAutoplayEnabled(true);
    }
  };

  // ÌôîÎ©¥ ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω Í∞êÏßÄ Ìö®Í≥º
  useEffect(() => {
    const handleResize = () => {
      setWindowWidth(window.innerWidth);
    };

    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  // ÌôîÎ©¥ ÌÅ¨Í∏∞Ïóê Îî∞Î•∏ Ïä¨ÎùºÏù¥Îçî ÏÑ§Ï†ï
  const getSlidesPerView = () => {
    if (windowWidth < 576) {
      // Î™®Î∞îÏùº
      return 4;
    } else if (windowWidth < 992) {
      // ÌÉúÎ∏îÎ¶ø
      return 3;
    } else {
      // Îç∞Ïä§ÌÅ¨ÌÉë
      return 3;
    }
  };

  const getRecommendSlidesPerView = () => {
    if (windowWidth < 576) {
      // Î™®Î∞îÏùº
      return 2;
    } else if (windowWidth < 992) {
      // ÌÉúÎ∏îÎ¶ø
      return 2;
    } else {
      // Îç∞Ïä§ÌÅ¨ÌÉë
      return 2;
    }
  };

  useEffect(() => {
    fetchData();
    axios
      .get("http://192.168.0.169:8090/api/v1/dashboard/sendDashboardData")
      .then((response) =>
        setadvertisement_images(response.data.advertisementimages)
      )
      .catch((error) =>
        console.error("Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò Î∞úÏÉù:", error)
      );
  }, []);

  async function fetchData() {
    try {
      const responses = await axios.all([
        axios.get("http://192.168.0.169:8090/dashboard/subscribing"),
        axios.get("http://192.168.0.169:8090/dashboard/chart1"),
        axios.get("http://192.168.0.169:8090/dashboard/chart2"),
        axios.get("http://192.168.0.169:8090/recommend/subscription"),
        axios.get("http://192.168.0.169:8090/recommend/card"),
      ]);

      setCards(responses[4].data);
      setChart1Labels(responses[1].data.map((item) => item.expenditureName));

      const datas = responses[1].data.map((item) => item.expenditureAmount);
      setChart1Datas(datas);

      // Ï¥ù ÏÜåÎπÑÏï° Í≥ÑÏÇ∞
      const total = datas.reduce((sum, current) => sum + current, 0);
      setTotalExpense(total);

      const subDatas = responses[2].data.map((item) => item.subAmount);
      setChart2Labels(responses[2].data.map((item) => item.subName));
      setChart2Datas(subDatas);

      // Íµ¨ÎèÖ Ï¥ù ÏÜåÎπÑÏï° Í≥ÑÏÇ∞
      const totalSub = subDatas.reduce((sum, current) => sum + current, 0);
      setTotalSubscriptionExpense(totalSub);

      setSubScribingImg(responses[0].data);
      setRecommendSubscribingImg(responses[3].data);
      setLoading(true);
    } catch (error) {
      console.error("Error:", error);
    }
  }

  const BarChart = () => {
    // Íµ¨ÎèÖ ÏßÄÏ∂ú ÏÉÅÏúÑ 3Í∞ú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
    const top3Data = chart2Datas.slice(0, 3);
    const top3Labels = chart2Labels.slice(0, 3);

    // Î™®Î∞îÏùº ÌôîÎ©¥ÏóêÏÑú Î∞î ÎëêÍªò Ï°∞Ï†ï
    const getBarThickness = () => {
      if (windowWidth < 576) {
        return 30; // Î™®Î∞îÏùºÏóêÏÑú Îçî ÏñáÍ≤å
      } else {
        return 60; // Îç∞Ïä§ÌÅ¨ÌÉë
      }
    };

    return (
      <div className="bar-chart-container">
        <div className="chart-wrapper">
          <div className="chart-rank-icons">
            {top3Labels.map((label, index) => (
              <div key={index} className="rank-icon">
                {index === 0 && <LooksOneIcon style={{ color: "#327BF0" }} />}
                {index === 1 && <LooksTwoIcon style={{ color: "#7AABFB" }} />}
                {index === 2 && <Looks3Icon style={{ color: "#ABC6FE" }} />}
              </div>
            ))}
          </div>

          <div className="chart-container-fixed">
            <Bar
              data={{
                labels: top3Labels,
                datasets: [
                  {
                    data: top3Data,
                    backgroundColor: ["#327BF0", "#7AABFB", "#ABC6FE"],
                    barThickness: getBarThickness(),
                    borderRadius: 10,
                  },
                ],
              }}
              options={{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: { display: false },
                  // Îç∞Ïù¥ÌÑ∞ ÎùºÎ≤®ÏùÑ ÎπÑÌôúÏÑ±Ìôî
                  datalabels: {
                    display: false, // Ïù¥ Î∂ÄÎ∂ÑÏù¥ Ï§ëÏöîÌï©ÎãàÎã§!
                  },
                },
                scales: {
                  x: {
                    grid: { display: false },
                    border: { display: false },
                  },
                  y: {
                    beginAtZero: true,
                    grid: { display: false },
                    ticks: { display: false },
                    border: { display: false },
                  },
                },
                layout: {
                  padding: {
                    left: 10,
                    right: 10,
                    bottom: 20,
                  },
                },
              }}
            />
          </div>
        </div>
      </div>
    );
  };

  const ExpenseBarChart = () => {
    // ÎàÑÏ†Å Í∞ÄÎ°ú Î∞î Ï∞®Ìä∏Î•º ÏúÑÌïú Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
    const dataColors = [
      "#327BF0",
      "#7AABFB",
      "#ABC6FE",
      "#CCD7EA",
      "#6495ED",
      "#4169E1",
      "#1E90FF",
      "#ADD8E6",
    ];

    // ÌôîÎ©¥ ÌÅ¨Í∏∞Ïóê Îî∞Îùº Ï∞®Ìä∏ÏôÄ Î†àÏ†ÑÎìú Î†àÏù¥ÏïÑÏõÉ Ï°∞Ï†ï
    const getChartWidth = () => {
      if (windowWidth < 576) {
        return "100%"; // Î™®Î∞îÏùºÏóêÏÑúÎäî ÌôîÎ©¥ ÎÑàÎπÑÏóê ÎßûÏ∂§
      } else {
        return "450px"; // Îç∞Ïä§ÌÅ¨ÌÉë
      }
    };

    return (
      <div className="expense-chart-container">
        <div
          style={{ width: getChartWidth(), height: "100px" }}
          className="expense-chart"
        >
          <Bar
            data={{
              labels: ["ÏßÄÏ∂ú"],
              datasets: chart1Labels.map((label, index) => ({
                label: label,
                data: [chart1Datas[index]],
                backgroundColor: dataColors[index % dataColors.length],
                barPercentage: 1,
                categoryPercentage: 0.8,
                borderRadius: 10,
              })),
            }}
            options={{
              responsive: true,
              maintainAspectRatio: false,
              indexAxis: "y",
              plugins: {
                legend: { display: false },
                datalabels: {
                  display: false,
                }, // Ïù¥ Î∂ÄÎ∂ÑÏù¥ Ï§ëÏöîÌï©ÎãàÎã§!
                tooltip: {
                  callbacks: {
                    label: function (context) {
                      return `${context.dataset.label}: ${context.raw.toLocaleString()}Ïõê`;
                    },
                  },
                },
              },
              scales: {
                x: {
                  stacked: true,
                  grid: { display: false },
                  border: { display: false },
                  ticks: { display: false },
                },
                y: {
                  stacked: true,
                  grid: { display: false },
                  border: { display: false },
                  ticks: { display: false },
                },
              },
              elements: {
                bar: {
                  borderRadius: 10,
                },
              },
              layout: {
                padding: {
                  top: 10,
                  bottom: 10,
                },
              },
            }}
          />
        </div>

        <div className="custom-legend">
          {chart1Labels.map((label, i) => {
            const category = categories.find((cat) => cat.name === label);
            return (
              <div key={i} className="legend-item">
                <span
                  className="legend-color"
                  style={{
                    backgroundColor: dataColors[i % dataColors.length],
                  }}
                >
                  {category ? category.emoji : "‚ùì"}
                </span>
                <div className="legend-text-container">
                  <span className="legend-text">{label}</span>
                  <span className="legend-value">
                    {chart1Datas[i].toLocaleString()}Ïõê
                  </span>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  const handleCardImageClick = (cardIndex) => {
    const selectedCard = {
      name: cards[cardIndex].card_name,
      shortDescription: cards[cardIndex].short_description,
      description: cards[cardIndex].description,
      imageUrl: cards[cardIndex].card_img_url,
      createdAt: cards[cardIndex].created_at,
    };

    navigate("/detail", { state: selectedCard });
    window.location.reload();
  };

  return (
    <>
      <div className="dashboard-container">
        <div className="advertisement-banner-section">
          <Swiper
            ref={swiperRef}
            spaceBetween={30}
            centeredSlides={true}
            autoplay={{
              delay: 3500,
              disableOnInteraction: false,
            }}
            pagination={{
              clickable: true,
              bulletClass: "swiper-pagination-bullet",
              bulletActiveClass: "swiper-pagination-bullet-active",
            }}
            navigation={true}
            modules={[Autoplay, Pagination, Navigation]}
            className="new-card-banner"
          >
            <SwiperSlide>
              <a href="#" alt="ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô">
                <img
                  src={ad1}
                  alt="advertisement-1"
                  style={{
                    borderRadius: "5px",
                    border: "1px solid #e0e0e0",
                  }}
                />
              </a>
            </SwiperSlide>
            <SwiperSlide>
              <a href="#" alt="ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô">
                <img
                  src={ad2}
                  alt="advertisement-2"
                  style={{
                    borderRadius: "8px",
                    border: "1px solid #e0e0e0",
                  }}
                />
              </a>
            </SwiperSlide>
          </Swiper>
          <div className="swiper-controls">
            <div className="swiper-pagination"></div>
            <button
              type="button"
              className="swiper-button-stop"
              onClick={handleStopAutoplay}
            >
              <span className="blind">stop</span>
            </button>
            <button
              type="button"
              className="swiper-button-play"
              id="homeCardBannerPlay"
              onClick={handleStartAutoplay}
            >
              <span className="blind">play</span>
            </button>
          </div>
        </div>

        <div className="section-header">
          <span className="section-title">Í≥†Í∞ùÎãòÏùò ÌòÑÏû¨ Íµ¨ÎèÖÏ§ëÏù∏ ÏÑúÎπÑÏä§</span>
          <div
            className="section-link"
            onClick={() => (window.location.href = "/my-subscriptions/1")}
          >
            <h4>ÎÇòÏùò Íµ¨ÎèÖ Í¥ÄÎ¶¨ ÌïòÎü¨ Í∞ÄÍ∏∞</h4>
            <ArrowCircleRightOutlinedIcon />
          </div>
        </div>

        <div className="card-container">
          <Swiper
            id="swiper-susbscription"
            slidesPerView={getSlidesPerView()}
            spaceBetween={6}
            centerInsufficientSlides={true}
            freeMode={true}
            modules={[FreeMode]}
            className="subscription-swiper"
          >
            {subscribingImg?.map((item, index) => (
              <SwiperSlide key={index}>
                <div className="sub-slider-item-container">
                  <img
                    src={item.subImgUrl}
                    className="subscription-slider-icon"
                    alt={`subscription-icon-${index}`}
                  />
                </div>
              </SwiperSlide>
            )) || <p>Loading...</p>}
          </Swiper>
        </div>

        <div className="section-header">
          <span className="section-title">
            Íµ¨ÎèÖ Í¥ÄÎ†® ÏÜåÎπÑ Ìå®ÌÑ¥ÏùÑ Î∂ÑÏÑùÌï¥ Î¥§Ïñ¥Ïöî!
          </span>
          <div
            className="section-link"
            onClick={() => (window.location.href = "/expenditure")}
          >
            <h4>ÏÜåÎπÑÎÇ¥Ïó≠ Î≥¥Îü¨Í∞ÄÍ∏∞</h4>
            <ArrowCircleRightOutlinedIcon />
          </div>
        </div>

        <div className="expenditure-container">
          <Swiper
            spaceBetween={30}
            centeredSlides
            pagination={{
              el: ".swiper-pagination",
              clickable: true,
              type: "bullets",
              bulletClass: "swiper-pagination-bullet",
              bulletActiveClass: "swiper-pagination-bullet-active",
            }}
            modules={[Pagination]}
            autoHeight={true}
            className="analysis-swiper"
          >
            <div className="swiper-pagination"></div>
            <SwiperSlide>
              <div className="analysis-slide">
                <span className="analysis-title">
                  Í≥†Í∞ùÎãòÏùò Íµ¨ÎèÖ ÏÜåÎπÑÏï°ÏùÄ
                  <br />
                  <span className="highlight">
                    {totalSubscriptionExpense.toLocaleString()}Ïõê
                  </span>{" "}
                  ÏûÖÎãàÎã§!
                </span>
                <span className="chart-title" style={{ marginBottom: 50 }}>
                  Ïù¥Îã¨Ïùò Íµ¨ÎèÖ ÏßÄÏ∂úÎÇ¥Ïó≠ Top3
                </span>
                <BarChart />
              </div>
            </SwiperSlide>
            <SwiperSlide>
              <div className="analysis-slide">
                <span className="analysis-title">
                  Ïù¥Î≤àÎã¨
                  <br />
                  <span className="highlight">
                    {totalExpense.toLocaleString()}ÏõêÏùÑ
                  </span>{" "}
                  ÏßÄÏ∂úÌïòÏÖ®ÎÑ§Ïöî!
                </span>
                <ExpenseBarChart />
              </div>
            </SwiperSlide>
          </Swiper>
        </div>

        <div className="recommendation-section">
          <div className="section-header">
            <span className="section-title">Ï∑®Ìñ•ÎåÄÎ°ú Ï¶êÍ∏∞Îäî Íµ¨ÎèÖ</span>
            <span className="section-subtitle">
              Í≥†Í∞ùÎãòÏùò ÏÜåÎπÑ Ìå®ÌÑ¥ÏùÑ Î∂ÑÏÑùÌï¥ÏÑú Ï∂îÏ≤ú Î¶¨Ïä§Ìä∏Î•º ÎßåÎì§Ïñ¥ Î¥§Ïñ¥Ïöî!
            </span>
            <div
              className="section-link"
              onClick={() => (window.location.href = "/subscriptions")}
            >
              <h4>Íµ¨Í≤ΩÌïòÎü¨ Í∞ÄÍ∏∞</h4>
              <ArrowCircleRightOutlinedIcon />
            </div>
          </div>

          <Swiper
            slidesPerView={getRecommendSlidesPerView()}
            spaceBetween={20}
            freeMode
            modules={[FreeMode]}
            className="recommendation-swiper"
          >
            {recommendSubscribingImg.map((item, index) => (
              <SwiperSlide key={index}>
                <div className="recommendation-card">
                  <img
                    src={item.subscription_img_url}
                    className="sub-icon"
                    alt={`recommend-${index}`}
                  />
                  <p className="recommendation-name">{item.name}</p>
                  <p className="recommendation-price">
                    Ïõî Íµ¨ÎèÖÎ£å{" "}
                    {item.price
                      .toString()
                      .replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                  </p>
                </div>
              </SwiperSlide>
            ))}
          </Swiper>
        </div>

        <div className="card-recommendation-section">
          <div className="section-header">
            <h2 className="section-title">Í≥†Í∞ùÎãòÏóêÍ≤å Îî± ÎßûÎäî Ïπ¥Îìú!</h2>
            <span className="section-subtitle">
              Í≥†Í∞ùÎãòÏù¥ ÌòÑÏû¨ Íµ¨ÎèÖÏ§ëÏù¥Ïã† ÏÑúÎπÑÏä§Î•º
              <br />
              Ïã†ÌïúÏπ¥Îìú ÌòúÌÉùÍ≥º Ìï®Íªò Ï¶êÍ≤®Î≥¥ÏÑ∏Ïöî!
            </span>
            <div
              className="section-link"
              onClick={() => (window.location.href = "/cards")}
            >
              <h4>Íµ¨Í≤ΩÌïòÎü¨ Í∞ÄÍ∏∞</h4>
              <ArrowCircleRightOutlinedIcon />
            </div>
          </div>
          {loading ? (
            <section
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center", // ÎÇ¥Î∂Ä ÏöîÏÜå(Ïπ¥Îìú) Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
                justifyContent: "center", // Î∂ÄÎ™® Ïª®ÌÖåÏù¥ÎÑà ÏûêÏ≤¥Î•º Ï§ëÏïô Ï†ïÎ†¨
                gap: "15px",
                width: "100%", // Ï†ÑÏ≤¥ ÌôîÎ©¥ Í∏∞Ï§ÄÏúºÎ°ú Ï†ïÎ†¨
                marginBottom: "30px",
              }}
            >
              {cards.map((card, index) => (
                <article
                  key={index}
                  style={{
                    display: "flex",
                    alignItems: "center",
                    background: "white",
                    borderRadius: "10px",
                    padding: "15px",
                    border: "1px solid #e0e0e0",
                    cursor: "pointer",
                    width: "80%", // Ïª®ÌÖåÏù¥ÎÑàÏùò 80% ÎÑàÎπÑ ÏÇ¨Ïö©
                  }}
                  onClick={() => handleCardImageClick(index)}
                >
                  <img
                    src={card.card_img_url}
                    alt="Card"
                    style={{
                      width: "60px",
                      height: "80px",
                      borderRadius: "10px",
                      marginRight: "15px",
                    }}
                  />
                  <h4
                    style={{
                      fontSize: "16px",
                      fontWeight: "bold",
                    }}
                  >
                    {card.card_name}
                  </h4>
                </article>
              ))}
            </section>
          ) : (
            <p style={{ textAlign: "center" }}>Loading...</p>
          )}
        </div>
      </div>
      <MenuFooter />
    </>
  );
}

export default Dashboard;
