import React, { useState, useEffect, useRef, useCallback } from 'react';
import axios from 'axios';
import Button from '@mui/material/Button';
import ButtonGroup from '@mui/material/ButtonGroup';
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
import ClickAwayListener from '@mui/material/ClickAwayListener';
import Grow from '@mui/material/Grow';
import Paper from '@mui/material/Paper';
import Popper from '@mui/material/Popper';
import MenuItem from '@mui/material/MenuItem';
import MenuList from '@mui/material/MenuList';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import Slide from '@mui/material/Slide';
import './ExpenditureList.css';
import MenuFooter from "../components/MenuFooter";

// datepicker
import dayjs from 'dayjs';
import { DemoContainer } from '@mui/x-date-pickers/internals/demo';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';

// Transition for the bottom popup
const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const categories = [
    { id: 0, name: "Ï†ÑÏ≤¥", emoji: "üîç" }, // Ï†ÑÏ≤¥ Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä
    { id: 1, name: "Ìó¨Ïä§ÏºÄÏñ¥", emoji: "üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è" },
    { id: 2, name: "Ìôà/ÎùºÏù¥ÌîÑ", emoji: "üè†" },
    { id: 3, name: "Í≤åÏûÑ", emoji: "üéÆ" },
    { id: 4, name: "IT", emoji: "üíª" },
    { id: 5, name: "ÏãùÌíà", emoji: "üçΩÔ∏è" },
    { id: 6, name: "ÏûêÍ∏∞Í∞úÎ∞ú", emoji: "üõ†Ô∏è" },
    { id: 7, name: "Î∑∞Ìã∞", emoji: "üíÑ" },
    { id: 8, name: "ÏòÅÏÉÅ", emoji: "üé•" },
    { id: 9, name: "ÏùåÏïÖ", emoji: "üéµ" },
    { id: 10, name: "ÎèÑÏÑú", emoji: "üìö" },
];

// Day of week function
const getDayOfWeek = (date) => {
  const days = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];
  const dayIndex = new Date(date).getDay();
  return days[dayIndex];
};

const ExpenditureList = () => {
    const [currentMonth, setCurrentMonth] = useState(new Date());
    const [expenditures, setExpenditures] = useState([]);
    const [totalExpense, setTotalExpense] = useState(0);
    const [totalIncome, setTotalIncome] = useState(0);
    const [categoryId, setCategoryId] = useState(null);
    const [cursorId, setCursorId] = useState(null);  // üîπ ÎßàÏßÄÎßâ ÏÜåÎπÑ ÎÇ¥Ïó≠ ID
    const [hasNext, setHasNext] = useState(true); // üîπ Îã§Ïùå Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ Ïó¨Î∂Ä
    const [isFetching, setIsFetching] = useState(false); // üîπ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë Ïó¨Î∂Ä
    const [open, setOpen] = useState(false);
    const [showDatePickerDialog, setShowDatePickerDialog] = useState(false);
    const anchorRef = useRef(null);
    
    // ÌòÑÏû¨ ÏõîÏùÑ Í∏∞Î∞òÏúºÎ°ú dayjs Í∞ùÏ≤¥ ÏÉùÏÑ±
    const [selectedDate, setSelectedDate] = useState(dayjs(currentMonth));
    // Ï∂îÍ∞Ä: ÌòÑÏû¨ Î∑∞ ÏÉÅÌÉú (month ÎòêÎäî year)
    const [datePickerView, setDatePickerView] = useState('month');
    
    // Group expenditures by date
    const groupedExpenditures = () => {
      const grouped = {};
      
      expenditures.forEach(item => {
        const dateKey = item.date.join('-');
        if (!grouped[dateKey]) {
          grouped[dateKey] = [];
        }
        grouped[dateKey].push(item);
      });
      
      // Sort dates in descending order (newest first)
      return Object.keys(grouped)
        .sort((a, b) => new Date(b) - new Date(a))
        .map(date => ({
          date,
          items: grouped[date]
        }));
    };

    // Find category by ID
    const getCategoryById = (id) => {
      return categories.find(cat => cat.id === id) || { emoji: "üîç", name: "Í∏∞ÌÉÄ" };
    };
    
    // DatePickerÏóêÏÑú ÎÇ†ÏßúÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå Ìò∏Ï∂ú
    const handleDateChange = (newDate) => {
        setSelectedDate(newDate);
    };
    
    // ÎÇ†Ïßú ÏÑ†ÌÉù Ï†ÅÏö©
    const handleApplyDate = () => {
        const newDate = selectedDate.toDate();
        setCurrentMonth(newDate);
        setShowDatePickerDialog(false);
        // Îã§Ïù¥ÏñºÎ°úÍ∑∏Í∞Ä Îã´Ìûê Îïå Î∑∞Î•º Îã§Ïãú monthÎ°ú Î¶¨ÏÖã
        setDatePickerView('month');
    };
    
    // ÎÇ†Ïßú ÏÑ†ÌÉù Ï∑®ÏÜå
    const handleCancelDatePicker = () => {
        setSelectedDate(dayjs(currentMonth)); // ÏõêÎûò Í∞íÏúºÎ°ú Î≥µÏõê
        setShowDatePickerDialog(false);
        // Îã§Ïù¥ÏñºÎ°úÍ∑∏Í∞Ä Îã´Ìûê Îïå Î∑∞Î•º Îã§Ïãú monthÎ°ú Î¶¨ÏÖã
        setDatePickerView('month');
    };
    
    // üîπ ÏÜåÎπÑ ÎÇ¥Ïó≠ Î∂àÎü¨Ïò§Í∏∞ (Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Ï†ÅÏö©)
    const fetchExpenditureData = useCallback(async (date, isLoadMore) => {
      // Ïù¥ÎØ∏ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ëÏù¥Î©¥ Ï§ëÎ≥µ ÏöîÏ≤≠ Î∞©ÏßÄ
      if (isFetching) {
        console.log("üö´ Ïù¥ÎØ∏ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ëÏûÖÎãàÎã§.");
        return;
      }
      
      // Ï∂îÍ∞Ä Î°úÎìúÍ∞Ä ÏïÑÎãàÍ≥†, Îã§Ïùå Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ (ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÏùò ÎÅù)
      if (!isLoadMore && !hasNext && cursorId !== null) {
        console.log("üö´ Îçî Ïù¥ÏÉÅ Í∞ÄÏ†∏Ïò¨ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
        return;
      }
      
      setIsFetching(true);
    
      const startDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-01`;
      const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
      const endDate = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${lastDay}`;
    
      // ‚úÖ categoryIdÍ∞Ä 0Ïù¥Î©¥ nullÎ°ú Î≥ÄÌôò
      const requestCategoryId = categoryId === 0 ? null : categoryId;
    
      // ‚úÖ Ï≤´ ÏöîÏ≤≠Ïùº Îïå cursorIdÎ•º nullÎ°ú Î≥ÄÍ≤Ω
      const requestCursorId = isLoadMore ? cursorId : null;
    
      console.log(`üì¢ API ÏöîÏ≤≠ - cursorId: ${requestCursorId}, isLoadMore: ${isLoadMore}`);
      console.log("ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:", { startDate, endDate, requestCategoryId });
    
      try {
        const response = await axios.post('http://localhost:8090/api/v1/expenditure/list', {
          cursorId: requestCursorId,
          startDate,
          endDate,
          categoryId: requestCategoryId,
          size: 10,
        });
    
        console.log("üìå API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:", response.data);
    
        setExpenditures((prev) => isLoadMore ? [...prev, ...response.data.expenditures] : response.data.expenditures);
        setTotalExpense(response.data.totalExpense);
        setTotalIncome(response.data.totalIncome);
        setCursorId(response.data.nextCursor);
        setHasNext(response.data.hasNext);
    
      } catch (error) {
        console.error('‚ùå ÏÜåÎπÑ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', error);
      } finally {
        setIsFetching(false);
      }
    }, [cursorId, isFetching, hasNext, categoryId]);
    
    // üîπ Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ Í∞êÏßÄ (Î¨¥Ìïú Ïä§ÌÅ¨Î°§)
    useEffect(() => {
      const handleScroll = () => {
        // Ïä§ÌÅ¨Î°§Ïù¥ ÌéòÏù¥ÏßÄ ÌïòÎã®Ïóê Í∞ÄÍπåÏõåÏßÄÎ©¥ Ï∂îÍ∞Ä Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        if (window.innerHeight + window.scrollY >= document.documentElement.offsetHeight - 100) {
          if (hasNext && !isFetching) {
            console.log("üîπ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï°∞Í±¥ Ï∂©Ï°±!");
            fetchExpenditureData(currentMonth, true);
          }
        }
      };
  
      window.addEventListener('scroll', handleScroll);
      return () => window.removeEventListener('scroll', handleScroll);
    }, [fetchExpenditureData, hasNext, isFetching]);
  
    const handleNextMonth = (e) => {
      e.stopPropagation(); // Î≤ÑÌäº ÌÅ¥Î¶≠Ïù¥ ÏÉÅÏúÑ ÏöîÏÜåÎ°ú Ï†ÑÌååÎêòÏßÄ ÏïäÎèÑÎ°ù Î∞©ÏßÄ
      const nextMonth = new Date(currentMonth);
      nextMonth.setMonth(currentMonth.getMonth() + 1);
      setCurrentMonth(nextMonth);
      setSelectedDate(dayjs(nextMonth));
    };
  
    const handlePrevMonth = (e) => {
      e.stopPropagation(); // Î≤ÑÌäº ÌÅ¥Î¶≠Ïù¥ ÏÉÅÏúÑ ÏöîÏÜåÎ°ú Ï†ÑÌååÎêòÏßÄ ÏïäÎèÑÎ°ù Î∞©ÏßÄ
      const prevMonth = new Date(currentMonth);
      prevMonth.setMonth(currentMonth.getMonth() - 1);
      setCurrentMonth(prevMonth);
      setSelectedDate(dayjs(prevMonth));
    };
  
    // üîπ Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ ÎòêÎäî Ïõî/Ïπ¥ÌÖåÍ≥†Î¶¨ Î≥ÄÍ≤Ω Ïãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    useEffect(() => {
      // ÏõîÏù¥ÎÇò Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä Î≥ÄÍ≤ΩÎêòÎ©¥ ÏÉÅÌÉú Ï¥àÍ∏∞ÌôîÌïòÍ≥† ÏÉà Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠
      console.log("üìÖ Ïõî/Ïπ¥ÌÖåÍ≥†Î¶¨ Î≥ÄÍ≤Ω Í∞êÏßÄ! ÏÉàÎ°úÏö¥ Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠:", currentMonth);
      setExpenditures([]);  // Î¶¨Ïä§Ìä∏ Ï¥àÍ∏∞Ìôî
      setCursorId(null);    // Ï≤´ ÏöîÏ≤≠Ïù¥ÎØÄÎ°ú cursorId Ï¥àÍ∏∞Ìôî
      setHasNext(true);     // ÏÉàÎ°úÏö¥ ÏöîÏ≤≠ÏùÑ ÏúÑÌï¥ hasNext Ï¥àÍ∏∞Ìôî
      setIsFetching(true);  // Î°úÎî© ÏÉÅÌÉú ÌôúÏÑ±Ìôî
      
      // fetchExpenditureData ÎåÄÏã† ÏßÅÏ†ë API Ìò∏Ï∂ú
      const loadInitialData = async () => {
        const startDate = `${currentMonth.getFullYear()}-${(currentMonth.getMonth() + 1).toString().padStart(2, '0')}-01`;
        const lastDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();
        const endDate = `${currentMonth.getFullYear()}-${(currentMonth.getMonth() + 1).toString().padStart(2, '0')}-${lastDay}`;
        
        const requestCategoryId = categoryId === 0 ? null : categoryId;
        
        try {
          const response = await axios.post('http://localhost:8090/api/v1/expenditure/list', {
            cursorId: null,
            startDate,
            endDate,
            categoryId: requestCategoryId,
            size: 10,
          });
          
          console.log("üìå Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏùëÎãµ:", response.data);
          
          setExpenditures(response.data.expenditures);
          setTotalExpense(response.data.totalExpense);
          setTotalIncome(response.data.totalIncome);
          setCursorId(response.data.nextCursor);
          setHasNext(response.data.hasNext);
        } catch (error) {
          console.error('‚ùå ÏÜåÎπÑ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.', error);
        } finally {
          setIsFetching(false);
        }
      };
      
      loadInitialData();
    }, [currentMonth, categoryId]);
  
    const handleCategorySelect = (event, index) => {
      setCategoryId(categories[index].id);
      setOpen(false);
    };
    
    // Î∑∞ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨ (month -> year)
    const handleViewChange = () => {
      setDatePickerView(datePickerView === 'month' ? 'year' : 'month');
    };
  
    return (
    <>
      <div className="expenditure-list">
        <header>
          <h2 className="month-display" onClick={() => setShowDatePickerDialog(true)}>
            <button onClick={handlePrevMonth} className="month-nav-btn">&lt;</button> 
            <span className="month-year-text">{currentMonth.getFullYear()}ÎÖÑ {currentMonth.getMonth() + 1}Ïõî</span> 
            <button onClick={handleNextMonth} className="month-nav-btn">&gt;</button>
          </h2>
        </header>
  
        <div className="summary">
          <p>ÏßÄÏ∂ú <strong className="income">{totalIncome.toLocaleString()}Ïõê</strong></p>
        </div>
  
        <div className="toggle-bar">
          <ButtonGroup variant="contained" ref={anchorRef}>
            <Button>{categories.find(cat => cat.id === categoryId)?.name || 'Ï†ÑÏ≤¥ ÎÇ¥Ïó≠'}</Button>
            <Button size="small" onClick={() => setOpen(prev => !prev)}>
              <ArrowDropDownIcon />
            </Button>
          </ButtonGroup>
          <Popper open={open} anchorEl={anchorRef.current} transition disablePortal>
            {({ TransitionProps }) => (
              <Grow {...TransitionProps}>
                <Paper>
                  <ClickAwayListener onClickAway={() => setOpen(false)}>
                    <MenuList>
                      {categories.map((category, index) => (
                        <MenuItem key={index} onClick={(event) => handleCategorySelect(event, index)}>
                          {category.name}
                        </MenuItem>
                      ))}
                    </MenuList>
                  </ClickAwayListener>
                </Paper>
              </Grow>
            )}
          </Popper>
        </div>
  
        <div className="expenditure-groups">
          {groupedExpenditures().length > 0 ? (
            groupedExpenditures().map((group) => {
              // Extract date components
              const dateParts = group.date.split('-');
              const dateObj = new Date(group.date);
              const dayOfWeek = getDayOfWeek(dateObj);
              
              return (
                <div key={group.date} className="date-group">
                  <div className="date-header">
                    <span className="date-day">{dateParts[2]}Ïùº {dayOfWeek}ÏöîÏùº</span>
                  </div>
                  <ul className="date-items">
                    {group.items.map((item) => {
                      const category = getCategoryById(item.categoryId);
                      const isAllCategory = categoryId === 0 || categoryId === null;
                      
                      return (
                        <li key={item.id} className="expenditure-item">
                          {/* Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä 'Ï†ÑÏ≤¥'Ïùº ÎïåÎßå ÏïÑÏù¥ÏΩò ÌëúÏãú */}
                          {isAllCategory && (
                            <div className="item-category">{category.emoji}</div>
                          )}
                          <div className="item-description" 
                            style={{ 
                              gridColumn: isAllCategory ? '2' : '1 / span 2',
                              paddingLeft: isAllCategory ? '10px' : '10px'
                            }}>
                            {item.description}
                          </div>
                          <div className="item-amount">{item.amount.toLocaleString()}Ïõê</div>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              );
            })
          ) : !isFetching && (
            <div className="no-data">Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.</div>
          )}
        </div>
  
        {/* Î°úÎî© ÌëúÏãú */}
        {isFetching && <p className="loading-text">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>}
      </div>
      
      {/* ÌïòÎã®ÏóêÏÑú Ïò¨ÎùºÏò§Îäî ÎÇ†Ïßú ÏÑ†ÌÉù Dialog */}
      <Dialog
        open={showDatePickerDialog}
        TransitionComponent={Transition}
        keepMounted
        fullWidth
        maxWidth="xs"
        onClose={() => {
          setShowDatePickerDialog(false);
          setDatePickerView('month'); // Îã§Ïù¥ÏñºÎ°úÍ∑∏Í∞Ä Îã´Ìûê Îïå Î∑∞Î•º Îã§Ïãú monthÎ°ú Î¶¨ÏÖã
        }}
        PaperProps={{
          style: {
            margin: 0,
            borderTopLeftRadius: 16,
            borderTopRightRadius: 16,
            bottom: 0,
            position: 'absolute',
            width: '100%'
          },
        }}
      >
        <DialogTitle>
          ÎÇ†Ïßú ÏÑ†ÌÉù
          <Button 
            onClick={handleViewChange} 
            color="primary" 
            style={{ marginLeft: 10, fontSize: '0.75rem' }}
          >
            
          </Button>
        </DialogTitle>
        <DialogContent>
          <LocalizationProvider dateAdapter={AdapterDayjs}>
            <DemoContainer components={['DatePicker']}>
              <DatePicker
                view={datePickerView}
                openTo={datePickerView}
                views={['year', 'month']}
                value={selectedDate}
                onChange={handleDateChange}
                format="YYYYÎÖÑ MMÏõî"
                sx={{ width: '100%' }}
                onViewChange={(newView) => {
                  setDatePickerView(newView);
                }}
              />
            </DemoContainer>
          </LocalizationProvider>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCancelDatePicker}>Ï∑®ÏÜå</Button>
          <Button onClick={handleApplyDate} variant="contained" color="primary">
            Ï†ÅÏö©
          </Button>
        </DialogActions>
      </Dialog>
      
      <MenuFooter />
    </>
    );
  };
  
  export default ExpenditureList;